# import os
# import pandas as pd
# import chromadb
# from chromadb.utils.embedding_functions import OllamaEmbeddingFunction

# # ‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ CSV
# csv_path = "rag_services.csv"
# df = pd.read_csv(csv_path)

# if df.empty:
#     print("‚ùå CSV –ø—É—Å—Ç–æ–π.")
#     exit()

# services = df["–£—Å–ª—É–≥–∞"].tolist()
# print(f"üì¶ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(services)} —É—Å–ª—É–≥ –∏–∑ CSV.")

# # ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Chroma (–Ω–æ–≤—ã–π —Ñ–æ—Ä–º–∞—Ç)
# client = chromadb.PersistentClient(path="./chroma_db")

# # ‚úÖ –ü–æ–ª—É—á–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é
# collection_name = "services"
# try:
#     collection = client.get_collection(collection_name)
#     print(f"üîÅ –ö–æ–ª–ª–µ–∫—Ü–∏—è '{collection_name}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
# except:
#     print(f"üÜï –°–æ–∑–¥–∞—ë–º –∫–æ–ª–ª–µ–∫—Ü–∏—é '{collection_name}'...")
#     embedding_fn = OllamaEmbeddingFunction(model_name="mxbai-embed-large:latest", url="http://localhost:11434")
#     collection = client.create_collection(name=collection_name, embedding_function=embedding_fn)

# # ‚úÖ –§–æ—Ä–º–∏—Ä—É–µ–º –∑–∞–ø–∏—Å–∏
# documents = services
# ids = [f"service_{i}" for i in range(len(documents))]
# metadatas = [{"price": int(row["–°—Ç–æ–∏–º–æ—Å—Ç—å (—Ä—É–±.)"])} for _, row in df.iterrows()]

# # ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –±–∞–∑—É
# print(f"üíæ –î–æ–±–∞–≤–ª—è–µ–º {len(documents)} –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ Chroma...")
# collection.add(documents=documents, ids=ids, metadatas=metadatas)
# print("‚úÖ –ì–æ—Ç–æ–≤–æ.")


import logging
import pandas as pd
import chromadb
from chromadb.utils.embedding_functions import OllamaEmbeddingFunction

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–æ–≤
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

# –ó–∞–≥—Ä—É–∑–∫–∞ CSV —Å —É—Å–ª—É–≥–∞–º–∏
CSV_PATH = "rag_services.csv"
try:
    df = pd.read_csv(CSV_PATH)
except Exception as e:
    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ {CSV_PATH}: {e}")
    exit(1)

services = df["–£—Å–ª—É–≥–∞"].tolist()
prices = df["–°—Ç–æ–∏–º–æ—Å—Ç—å (—Ä—É–±.)"].astype(str).tolist()
ids = [f"id_{i}" for i in range(len(services))]

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ChromaDB
chroma_client = chromadb.PersistentClient(path="chroma_db")
collection = chroma_client.get_or_create_collection(
    name="auto_services",
    embedding_function=OllamaEmbeddingFunction(model_name="mxbai-embed-large", url="http://localhost:11434")
)

# –û—á–∏—Å—Ç–∫–∞ –ø–µ—Ä–µ–¥ –Ω–æ–≤–æ–π –∑–∞–≥—Ä—É–∑–∫–æ–π
existing = collection.get(include=[])
if existing["ids"]:
    logging.info("–û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ –∫–æ–ª–ª–µ–∫—Ü–∏–∏...")
    collection.delete(ids=existing["ids"])

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
logging.info("–°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Å–ª—É–≥ –≤ –±–∞–∑—É...")
collection.add(
    ids=ids,
    documents=services,
    metadatas=[{"price": price} for price in prices]
)

logging.info("‚úÖ –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –£—Å–ª—É–≥–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ ChromaDB.")
