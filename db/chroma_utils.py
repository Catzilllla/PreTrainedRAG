import chromadb
from chromadb.config import Settings
import pandas as pd
import httpx
from typing import List, Callable

collection_name = "services"
OLLAMA_URL = "http://localhost:12000"

class OllamaEmbeddingFunction:
    def __init__(self, model_name="mxbai-embed-large", url="http://localhost:12000"):
        self.model = model_name
        self.url = url

    def __call__(self, texts: List[str]) -> List[List[float]]:
        embeddings = []
        for text in texts:
            payload = {
                "model": self.model,
                "prompt": text,
                "stream": False
            }
            response = httpx.post(f"{self.url}/api/embeddings", json=payload)
            response.raise_for_status()
            data = response.json()
            embeddings.append(data["embedding"])
        return embeddings


# embedding_fn = OllamaEmbeddingFunction(model_name="mxbai-embed-large:latest", url=OLLAMA_URL)
# client = chromadb.HttpClient(host="http://localhost", port=8000)

embedding_fn = OllamaEmbeddingFunction(
    model_name="mxbai-embed-large",
    url="http://localhost:12000"
)

client = chromadb.HttpClient(host="host.docker.internal", port=8000)

collection = client.get_or_create_collection(
    name="services",
    embedding_function=embedding_fn
)

# –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏
def get_collection():
    try:
        return client.get_collection(name=collection_name, embedding_function=embedding_fn)
    except Exception:
        return client.create_collection(name=collection_name, embedding_function=embedding_fn)

# –ü–æ–∏—Å–∫ –ø–æ –∑–∞–ø—Ä–æ—Å—É
def search_service(query: str, threshold: float = 0.45):
    collection = get_collection()
    results = collection.query(query_texts=[query], n_results=1)

    if results["distances"] and results["distances"][0][0] < threshold:
        doc = results["documents"][0][0]
        meta = results["metadatas"][0][0]
        score = results["distances"][0][0]
        return f"‚úÖ –ù–∞–π–¥–µ–Ω–æ:\nüõ†Ô∏è –£—Å–ª—É–≥–∞: {doc}\nüí∞ –¶–µ–Ω–∞: {meta.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')} —Ä—É–±.\nüìè –°—Ö–æ–¥—Å—Ç–≤–æ: {score:.2f}"
    else:
        all_data = collection.get()
        output = "‚ö†Ô∏è –ù–∏—á–µ–≥–æ –ø–æ—Ö–æ–∂–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ. –í–æ—Ç –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ —É—Å–ª—É–≥–∏:\n\n"
        for doc, meta in zip(all_data["documents"], all_data["metadatas"]):
            output += f" - {doc}: {meta.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')} —Ä—É–±.\n"
        return output