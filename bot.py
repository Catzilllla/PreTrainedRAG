import logging
import telebot
from telebot import types
import pandas as pd
import torch
from sentence_transformers import SentenceTransformer, util
import chromadb
from chromadb.config import Settings
import os

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
BOT_TOKEN = os.getenv("BOT_TOKEN", "your-telegram-bot-token")
ADMIN_CHAT_ID = os.getenv("ADMIN_CHAT_ID", "@tgChannelForm")
DEEPSEEK_API_KEY = os.getenv("DEEPSEEK_API_KEY", "deep-seek-tok")
EMBEDDING_MODEL = "mxbai-embed-large"

bot = telebot.TeleBot(BOT_TOKEN)
logging.basicConfig(level=logging.INFO, format='%(asctime)s [%(levelname)s] %(message)s')

# --- –ó–∞–≥—Ä—É–∑–∫–∞ —É—Å–ª—É–≥ ---
df = pd.read_csv("rag_services.csv")
services = df["–£—Å–ª—É–≥–∞"].tolist()
prices = df["–°—Ç–æ–∏–º–æ—Å—Ç—å (—Ä—É–±.)"].tolist()

# --- –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ ChromaDB —Å —ç–º–±–µ–¥–¥–∏–Ω–≥–∞–º–∏ ---
client = chromadb.PersistentClient(path="chroma_db")
collection = client.get_or_create_collection("auto_services")

# --- –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
user_state = {}

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
def main_menu():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(types.KeyboardButton("üöó –ó–∞–ø–∏—Å—å –Ω–∞ —Å–µ—Ä–≤–∏—Å"), types.KeyboardButton("üîß –û–ø–∏—Å–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É"))
    return markup

# --- Start ---
@bot.message_handler(commands=["start"])
def handle_start(message):
    bot.send_message(message.chat.id, "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –∑–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∞–≤—Ç–æ—Å–µ—Ä–≤–∏—Å –∏–ª–∏ —É–∑–Ω–∞—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—Å–ª—É–≥–∏.", reply_markup=main_menu())

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–Ω–æ–ø–æ–∫ ---
@bot.message_handler(func=lambda m: m.text == "üöó –ó–∞–ø–∏—Å—å –Ω–∞ —Å–µ—Ä–≤–∏—Å")
def handle_booking(message):
    user_state[message.chat.id] = {"step": "name"}
    bot.send_message(message.chat.id, "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?")

@bot.message_handler(func=lambda m: m.text == "üîß –û–ø–∏—Å–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—É")
def handle_problem_start(message):
    bot.send_message(message.chat.id, "–û–ø–∏—à–∏—Ç–µ, –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–±–ª–µ–º—É —Å –∞–≤—Ç–æ–º–æ–±–∏–ª–µ–º.")

# --- –°–±–æ—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ ---
@bot.message_handler(func=lambda message: user_state.get(message.chat.id, {}).get("step") is not None)
def handle_data_collection(message):
    user = user_state.setdefault(message.chat.id, {})

    if user["step"] == "name":
        user["name"] = message.text
        user["step"] = "phone"
        bot.send_message(message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:")
    elif user["step"] == "phone":
        user["phone"] = message.text
        user["step"] = "car"
        bot.send_message(message.chat.id, "–ú–∞—Ä–∫–∞ –∏ –º–æ–¥–µ–ª—å –∞–≤—Ç–æ–º–æ–±–∏–ª—è:")
    elif user["step"] == "car":
        user["car"] = message.text
        user["step"] = "issue"
        bot.send_message(message.chat.id, "–û–ø–∏—à–∏—Ç–µ –ø—Ä–æ–±–ª–µ–º—É:")
    elif user["step"] == "issue":
        user["issue"] = message.text
        user["step"] = "time"
        bot.send_message(message.chat.id, "–£–∫–∞–∂–∏—Ç–µ –∂–µ–ª–∞–µ–º–æ–µ –≤—Ä–µ–º—è –∑–∞–ø–∏—Å–∏:")
    elif user["step"] == "time":
        user["time"] = message.text
        send_request_to_admin(message.chat.id)
        del user_state[message.chat.id]
        bot.send_message(message.chat.id, "–°–ø–∞—Å–∏–±–æ! –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.", reply_markup=main_menu())

# --- –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞—è–≤–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É ---
def send_request_to_admin(user_id):
    user = user_state[user_id]
    text = (
        f"üÜï –ó–∞—è–≤–∫–∞ –Ω–∞ —Å–µ—Ä–≤–∏—Å:\n"
        f"üë§ –ò–º—è: {user['name']}\n"
        f"üì± –¢–µ–ª–µ—Ñ–æ–Ω: {user['phone']}\n"
        f"üöò –ê–≤—Ç–æ–º–æ–±–∏–ª—å: {user['car']}\n"
        f"üîß –ü—Ä–æ–±–ª–µ–º–∞: {user['issue']}\n"
        f"üïì –í—Ä–µ–º—è: {user['time']}"
    )
    bot.send_message(ADMIN_CHAT_ID, text)
    logging.info(f"–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞: {text}")

# --- –ü–æ–∏—Å–∫ —É—Å–ª—É–≥–∏ –ø–æ –ø—Ä–æ–±–ª–µ–º–µ ---
@bot.message_handler(func=lambda m: True)
def handle_problem_search(message):
    query = message.text
    results = collection.query(query_texts=[query], n_results=1)
    
    if not results["documents"]:
        bot.send_message(message.chat.id, "–£—Å–ª—É–≥–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö:", reply_markup=None)
        service_list = "\n".join(f"{s} ‚Äî {p} —Ä—É–±." for s, p in zip(services, prices))
        bot.send_message(message.chat.id, service_list)
    else:
        matched_service = results["documents"][0][0]
        idx = services.index(matched_service)
        response = f"‚úÖ –ü—Ä–µ–¥–ª–∞–≥–∞–µ–º —É—Å–ª—É–≥—É: {matched_service}\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å: {prices[idx]} —Ä—É–±."
        bot.send_message(message.chat.id, response)

# --- –ó–∞–ø—É—Å–∫ ---
if __name__ == "__main__":
    logging.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω.")
    bot.infinity_polling()
